Parameters:
  BedrockModelId:
    Type: String
    Description: The ID of the Foundation Model to use for the Agent
    Default: us.anthropic.claude-3-5-sonnet-20241022-v2:0
  RedshiftDatabaseName:
    Type: String
    Default: dev
  RedshiftUserName:
    Type: String
    Default: admin
  RedshiftPassword:
    Type: String
    NoEcho: true
    Description: "STORE SECURELY - The password for the Redshift master user. Must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, and one number."
    MinLength: 8
    MaxLength: 64
    AllowedPattern: ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d!@#$%^&*()_+\-=\[\]{};:'",.<>?]{8,64}$
    ConstraintDescription: "Password must be between 8 and 64 characters, and contain at least one uppercase letter, one lowercase letter, and one number."
  GithubLink:
    Type: String
    Description: "The link to the agent build cloudformation stack"
    Default: "https://github.com/aws-samples/amazon-bedrock-agents-healthcare-lifesciences.git"
  MultiAgentDevMode:
    Type: String
    Description: Select True to use a python notebook to manually create the agents step by step. Select false to auto create all agents.
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
  GitBranch:
    Type: String
    Description: The github branch to clone
    Default: main
  ReactAppAllowedCidr:
    Type: String
    Description: "Allowed CIDR block (X.X.X.X/X) for React App UI access"
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: Must be a valid CIDR block in format x.x.x.x/x
  TavilyApiKey:
    Type: String
    NoEcho: true
    Description: Provide TavilyApiKey API Key to utilize /web_search path
    Default: ""
  USPTOApiKey:
    Type: String
    NoEcho: true
    Description: Provide USPTO API Key to utilize /search path
    Default: ""
  DeployApplication:
    Type: String
    Description: Select true to deploy the application. Select false to only build the application.
    Default: "true"
    AllowedValues:
      - "true"
      - "false"

Conditions:
  CreateCompetitiveIntelAgent:
    !Not [!Or [!Equals [!Ref TavilyApiKey, ""], !Equals [!Ref USPTOApiKey, ""]]]
  CreateReactApp: !Equals [!Ref DeployApplication, "true"]


Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: "AWS::Region"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet1
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: "AWS::Region"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet2
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: "AWS::Region"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet1
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: "AWS::Region"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet2
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateRouteTable

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  # VPC Gateway Attachment
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-${AWS::AccountId}-${AWS::Region}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowCloudFormationReadAccess
            Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action:
              - s3:GetObject
            Resource: !Sub arn:aws:s3:::${S3Bucket}/*
          - Sid: AllowCodeBuildAndLambdaAccess
            Effect: Allow
            Principal:
              AWS:
                - !GetAtt CodeBuildServiceRole.Arn
                - !GetAtt TriggerAgentBuildLambdaRole.Arn
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:ListBucket
            Resource:
              - !Sub arn:aws:s3:::${S3Bucket}
              - !Sub arn:aws:s3:::${S3Bucket}/*
          - Sid: AllowRedshiftLogging
            Effect: Allow
            Principal:
              Service: redshift.amazonaws.com
            Action:
              - s3:PutObject
              - s3:GetBucketLocation
              - s3:ListBucket
              - s3:GetBucketAcl
              - s3:PutBucketAcl
            Resource:
              - !Sub arn:aws:s3:::${S3Bucket}
              - !Sub arn:aws:s3:::${S3Bucket}/*

  TriggerAgentBuildCustomResource:
    Type: Custom::TriggerAgentBuild
    Properties:
      ServiceToken: !GetAtt TriggerAgentBuildLambda.Arn
      ProjectName: !Ref AgentCodeBuild

  TriggerReactAppBuildCustomResource:
    Type: Custom::TriggerAgentBuild
    Condition: CreateReactApp
    Properties:
      ServiceToken: !GetAtt TriggerAgentBuildLambda.Arn
      ProjectName: !Ref ReactAppCodeBuild

  TriggerAgentBuildLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt TriggerAgentBuildLambdaRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import time
          def handler(event, context):
              if event['RequestType'] in ['Create', 'Update']:
                  try:
                      codebuild = boto3.client('codebuild')
                      project_name = event['ResourceProperties']['ProjectName']
                      response = codebuild.start_build(projectName=project_name)
                      build_id = response['build']['id']
                      print(f"Build started: {build_id}")
                      time.sleep(120)
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {"BuildId": build_id})
                  except Exception as e:
                      print(f"Error: {str(e)}")
                      cfnresponse.send(event, context, cfnresponse.FAILED, {"Error": str(e)})
              elif event['RequestType'] == 'Delete':
                  # No action needed for delete, as S3 cleanup will be handled separately
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
      Runtime: python3.12
      Timeout: 300

  CleanupLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt CleanupLambdaRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse

          def delete_bucket_contents(bucket):
              s3 = boto3.resource('s3')
              bucket = s3.Bucket(bucket)
              bucket.objects.all().delete()

          def handler(event, context):
              if event['RequestType'] == 'Delete':
                  s3 = boto3.client('s3')
                  bucket = event['ResourceProperties']['S3Bucket']
                  try:
                      # Delete all objects in the bucket
                      delete_bucket_contents(bucket)
                      print(f"Deleted all contents from bucket: {bucket}")
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                  except Exception as e:
                      print(f"Error: {str(e)}")
                      cfnresponse.send(event, context, cfnresponse.FAILED, {"Error": str(e)})
              else:
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
      Runtime: python3.12
      Timeout: 300

  CleanupLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3DeletePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::${S3Bucket}
                  - !Sub arn:aws:s3:::${S3Bucket}/*
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*

  CleanupCustomResource:
    Type: Custom::Cleanup
    Properties:
      ServiceToken: !GetAtt CleanupLambdaFunction.Arn
      S3Bucket: !Ref S3Bucket
      S3Prefix: ""

  TriggerAgentBuildLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildStartBuildPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                Resource:
                  - !GetAtt AgentCodeBuild.Arn
                  - !GetAtt ReactAppCodeBuild.Arn
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-AgentCodeBuild:*
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-ReactAppCodeBuild:*
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::${S3Bucket}
                  - !Sub arn:aws:s3:::${S3Bucket}/*
              - Effect: Allow
                Action:
                  - cloudformation:PackageTemplate
                Resource:
                  - !Sub arn:aws:s3:::${S3Bucket}
                  - !Sub arn:aws:s3:::${S3Bucket}/*

  AgentCodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${AWS::StackName}-AgentCodeBuild
      Description: "CodeBuild project to build and package agent CloudFormation templates"
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      TimeoutInMinutes: 15
      Artifacts:
        Type: S3
        Location: !Ref S3Bucket
        Name: packaged_agents
        NamespaceType: NONE
        Packaging: NONE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
      Source:
        Type: NO_SOURCE
        BuildSpec: !Sub |
          version: 0.2
          env:
            variables:
              S3_BUCKET: ${S3Bucket}
              GIT_BRANCH: ${GitBranch}
              GITHUB_LINK: ${GithubLink}
          phases:
            install:
              runtime-versions:
                python: 3.8
            pre_build:
              commands:
                - echo Cloning the repository
                - git clone -b $GIT_BRANCH --single-branch $GITHUB_LINK repo
                - cd repo
                - chmod +x build_agents.sh
            build:
              commands:
                - echo Processing agent templates
                - ./build_agents.sh
            post_build:
              commands:
                - echo Build completed on `date`

  AgentBuildNestedStack:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - TriggerAgentBuildCustomResource
      - CleanupCustomResource
    Properties:
      TemplateURL: !Sub https://${S3Bucket}.s3.${AWS::Region}.amazonaws.com/packaged_agent_build.yaml
      Parameters:
        BedrockModelId: !Ref BedrockModelId
        RedshiftDatabaseName: !Ref RedshiftDatabaseName
        RedshiftUserName: !Ref RedshiftUserName
        RedshiftPassword: !Ref RedshiftPassword
        MultiAgentDevMode: !Ref MultiAgentDevMode
        EnvironmentName: toolkit
        GitRepoURL: !Ref GithubLink
        GitBranch: !Ref GitBranch
        SubAgentS3Bucket: !Ref S3Bucket
        VPC: !Ref VPC
        PrivateSubnet1: !Ref PrivateSubnet1
        PrivateSubnet2: !Ref PrivateSubnet2
      TimeoutInMinutes: 30

  ReactAppCodeBuild:
    Type: AWS::CodeBuild::Project
    Condition: CreateReactApp
    Properties:
      Name: !Sub ${AWS::StackName}-ReactAppCodeBuild
      Description: "CodeBuild project to build and React App CloudFormation templates"
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      TimeoutInMinutes: 15
      Artifacts:
        Type: S3
        Location: !Ref S3Bucket
        Name: packaged_react_app
        NamespaceType: NONE
        Packaging: NONE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
      Source:
        Type: NO_SOURCE
        BuildSpec: !Sub |
          version: 0.2
          env:
            variables:
              S3_BUCKET: ${S3Bucket}
              GIT_BRANCH: ${GitBranch}
              GITHUB_LINK: ${GithubLink}
          phases:
            install:
              runtime-versions:
                python: 3.8
            pre_build:
              commands:
                - echo Cloning the repository
                - git clone -b $GIT_BRANCH --single-branch $GITHUB_LINK repo
                - cd repo
                - chmod +x build_react_app.sh
            build:
              commands:
                - echo Processing react app templates
                - ls -la
                - ./build_react_app.sh
            post_build:
              commands:
                - echo Build completed on `date`

  ReactAppDockerBuildNestedStack:
    Type: AWS::CloudFormation::Stack
    Condition: CreateReactApp
    DependsOn:
      - ReactAppCodeBuild
      - TriggerReactAppBuildCustomResource
    Properties:
      TemplateURL: !Sub https://${S3Bucket}.s3.${AWS::Region}.amazonaws.com/ui/docker_build_pipeline.yml
      Parameters:
        ProjectName: toolkit-react-ui
        PackageBucketName: !Sub ${S3Bucket}
        PackageArtifactKey: ui/ui_artifact.zip
      TimeoutInMinutes: 35

  ReactAppEcsBuildNestedStack:
    Type: AWS::CloudFormation::Stack
    Condition: CreateReactApp
    DependsOn:
      - ReactAppDockerBuildNestedStack
    Properties:
      TemplateURL: !Sub https://${S3Bucket}.s3.${AWS::Region}.amazonaws.com/ui/ecs.yml
      Parameters:
        VPCId: !Ref VPC
        AllowedCidr: !Ref ReactAppAllowedCidr
        PublicSubnet1: !Ref PublicSubnet1
        PublicSubnet2: !Ref PublicSubnet2
        ImageUrl: !GetAtt
          - ReactAppDockerBuildNestedStack
          - Outputs.ECRRepositoryURI
      TimeoutInMinutes: 35

  ClinicalTrialProtocolSupervisorStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${S3Bucket}.s3.${AWS::Region}.amazonaws.com/agents_catalog/packaged_clinical-trial-protocol-assistant-cfn.yaml
      Parameters:
        AgentIAMRoleArn: !GetAtt AgentBuildNestedStack.Outputs.AgentRole
        S3Bucket: !Ref S3Bucket
      TimeoutInMinutes: 35

  CompetitiveIntelligenceSupervisorStack:
    Type: AWS::CloudFormation::Stack
    Condition: CreateCompetitiveIntelAgent
    Properties:
      TemplateURL: !Sub https://${S3Bucket}.s3.${AWS::Region}.amazonaws.com/agents_catalog/packaged_competitive-intelligence-agent-cfn.yaml
      Parameters:
        TavilyApiKey: !Ref TavilyApiKey
        USPTOApiKey: !Ref USPTOApiKey
        AgentIAMRoleArn: !GetAtt AgentBuildNestedStack.Outputs.AgentRole
        S3Bucket: !Ref S3Bucket
      TimeoutInMinutes: 35

Outputs:
  RedshiftClusterEndpoint:
    Description: Redshift Cluster Endpoint
    Value: !GetAtt AgentBuildNestedStack.Outputs.RedshiftClusterEndpoint
  ReactAppExternalURL:
    Condition: CreateReactApp
    Value:
      Fn::GetAtt:
        - ReactAppEcsBuildNestedStack
        - Outputs.ExternalUrl
    Description: ALB DNS for the React App
  AgentRole:
    Value:
      Fn::GetAtt:
        - AgentBuildNestedStack
        - Outputs.AgentRole
    Description: Amazon Bedrock Agents Service Role ARN
