AWSTemplateFormatVersion: "2010-09-09"
Description: Creates the web search agent.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Web Search API keys
        Parameters:
          - TavilyApiKey
Parameters:
  AgentAliasName:
    Type: String
    Default: "Latest"
  BedrockModelId:
    Type: String
    Description: The ID of the Foundation Model to use for the Agent
    Default: us.anthropic.claude-3-5-sonnet-20241022-v2:0
  AgentIAMRoleArn:
    Type: String
    Description: (Optional) Amazon Bedrock Agents service role ARN
    Default: ""
  TavilyApiKey:
    Type: String
    NoEcho: true
    Description: Provide TavilyApiKey API Key to utilize /web_search path
    MinLength: 1

Conditions:
  HasTavilyApiKeyCondition: !Not [!Equals [!Ref TavilyApiKey, ""]]
  CreateAgentAliasCondition: !Not [!Equals [!Ref AgentAliasName, ""]]
  AgentIAMRoleCondition: !Not [!Equals [!Ref AgentIAMRoleArn, ""]]

Resources:
  #####################
  ##### API Keys #####
  ###################

  TavilyApiKeySecret:
    Type: "AWS::SecretsManager::Secret"
    Condition: HasTavilyApiKeyCondition
    Properties:
      Name: !Sub
        - "TAVILY_API_KEY_${StackId}"
        - StackId: !Select [2, !Split ["/", !Ref AWS::StackId]]
      Description: "API Key for Tavily service"
      SecretString: !Ref TavilyApiKey

  ########################
  ##### WebSearch #####
  ######################

  WebSearchLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: TavilyWebSearch
      Description: "Search the web with { 'search_query' } parameter. Optional { 'days' } parameter for days of history to search and { 'topic' } parameter for either 'news' or 'general' content type."
      Runtime: python3.13
      Handler: index.lambda_handler
      Role: !GetAtt WebSearchLambdaRole.Arn
      Timeout: 30
      MemorySize: 128
      Environment:
        Variables:
          ACTION_GROUP: "WebSearchActionGroup"
          TAVILY_API_KEY_NAME: !Sub
            - "TAVILY_API_KEY_${StackId}"
            - StackId: !Select [2, !Split ["/", !Ref AWS::StackId]]
      Code: "action-groups/web-search"
      Tags:
        - Key: Application
          Value: HCLSAgents

  WebSearchLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: GetSecretsManagerSecret
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:TAVILY_API_KEY_*

  WebSearchLambdaAgentPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt WebSearchLambdaFunction.Arn
      Principal: bedrock.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent-alias/*

  WebSearchLambdaAgentAliasPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt WebSearchLambdaFunction.Arn
      Principal: bedrock.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*

  #####################
  ##### Agent #####
  ###################

  WebSearchAgent:
    Type: AWS::Bedrock::Agent
    Properties:
      ActionGroups:
        - ActionGroupName: "UserInputAction"
          ParentActionGroupSignature: "AMAZON.UserInput"
          ActionGroupState: "ENABLED"
        - ActionGroupName: WebSearch
          Description: Actions for answering questions with information from the internet
          ActionGroupExecutor:
            Lambda: !GetAtt WebSearchLambdaFunction.Arn
          ActionGroupState: ENABLED
          FunctionSchema:
            Functions:
              - Name: web_search
                Description: Execute an internet search query using Tavily Search.
                Parameters:
                  search_query:
                    Description: "The search query to execute with Tavily. Example: 'Who is Leo Messi?'"
                    Type: string
                    Required: True
                  target_website:
                    Description: "The specific website to search including its domain name. If not provided, the most relevant website will be used"
                    Type: string
                    Required: False
                  topic:
                    Description: "The topic being searched. 'news' or 'general'. Helps narrow the search when news is the focus."
                    Type: string
                    Required: False
                  days:
                    Description: "The number of days of history to search. Helps when looking for recent events or news."
                    Type: string
                    Required: False
      AgentName: Tavily-Web-Search-Agent
      # If an IAM role ARN is passed as a paremter, use it. Otherwise look in SSM parameter store
      AgentResourceRoleArn:
        "Fn::If":
          - AgentIAMRoleCondition
          - !Ref AgentIAMRoleArn
          - "{{resolve:ssm:/bedrock/agent/role/arn:1}}"
      AutoPrepare: True
      Description: "Answer questions by searching the internet."
      FoundationModel: !Ref BedrockModelId
      GuardrailConfiguration:
        GuardrailIdentifier: !GetAtt WebSearchGuardrail.GuardrailId
        GuardrailVersion: !GetAtt WebSearchGuardrail.Version
      Instruction: |
        You are a research assistant specializing in web-based information retrieval. Your task:

        1. Analyze queries precisely
        2. Search for authoritative, current sources
        3. Deliver concise, factual responses
        4. Include source citations

        Guidelines:
        - Communicate with clarity and precision
        - Evaluate source reliability
        - Focus on recent, relevant data
        - Decompose complex questions
        - Document search methodology
        - Request query refinement when needed

        Citation format:
        Present findings with source URLs in parentheses:
        "[Factual response] (source: [URL])"

        For example, if the user asks:

        "who built the tower of london?"

        And you find the answer at this url:

        "https://en.wikipedia.org//w/index.php?title=Tower_of_London"

        A good response is: 

        "William the Conqueror built the tower of london in 1078 (source: https://en.wikipedia.org//w/index.php?title=Tower_of_London)"

  AgentAliasResource:
    Type: AWS::Bedrock::AgentAlias
    Condition: CreateAgentAliasCondition
    Properties:
      AgentId: !GetAtt WebSearchAgent.AgentId
      AgentAliasName: !Ref AgentAliasName

  WebSearchGuardrail:
    Type: AWS::Bedrock::Guardrail
    Properties:
      BlockedInputMessaging: "Sorry, your query violates our usage policies."
      BlockedOutputsMessaging: "Sorry, I am unable to reply because the output violates our usage policies."
      ContentPolicyConfig:
        FiltersConfig:
          - InputStrength: "HIGH"
            OutputStrength: "HIGH"
            Type: "SEXUAL"
          - InputStrength: "HIGH"
            OutputStrength: "HIGH"
            Type: "VIOLENCE"
          - InputStrength: "HIGH"
            OutputStrength: "HIGH"
            Type: "HATE"
          - InputStrength: "HIGH"
            OutputStrength: "HIGH"
            Type: "INSULTS"
          - InputStrength: "HIGH"
            OutputStrength: "HIGH"
            Type: "MISCONDUCT"
          - InputStrength: "HIGH"
            OutputStrength: "NONE"
            Type: "PROMPT_ATTACK"
      Description: Turn on to block profane words and other harmful content.
      Name: WebSearchGuardrail
      WordPolicyConfig:
        ManagedWordListsConfig:
          - Type: PROFANITY

Outputs:
  AgentId:
    Description: Agent ID
    Value: !Ref WebSearchAgent
  AgentAliasId:
    Description: Agent Alias ID
    Value: !GetAtt AgentAliasResource.AgentAliasId
    Condition: CreateAgentAliasCondition
  AgentAliasArn:
    Description: Agent Alias ARN
    Value: !GetAtt AgentAliasResource.AgentAliasArn
    Condition: CreateAgentAliasCondition