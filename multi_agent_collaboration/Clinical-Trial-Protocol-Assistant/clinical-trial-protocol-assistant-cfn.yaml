AWSTemplateFormatVersion: "2010-09-09"
Description: Creates the Clinical Trial Protocol Assistant supervisor agent.
Parameters:
  AgentAliasName:
    Type: String
    Default: "Latest"
  BedrockModelId:
    Type: String
    Description: The ID of the Foundation Model to use for the Agent
    Default: us.anthropic.claude-3-5-sonnet-20240620-v1:0
  S3Bucket:
    Type: String
    Description: (Optional) Amazon S3 bucket name for storing outputs
  AgentIAMRoleArn:
    Type: String
    Description: (Optional) Amazon Bedrock Agents service role ARN
    Default: ""


Conditions:
  CreateAgentAliasCondition: !Not [!Equals [!Ref AgentAliasName, ""]]
  AgentIAMRoleCondition: !Not [!Equals [!Ref AgentIAMRoleArn, ""]]

Resources:
  #####################
  ##### Agent #####
  ###################

  ClinicalStudySearchAgentStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${S3Bucket}.s3.${AWS::Region}.amazonaws.com/agents_catalog/packaged_clinical-study-agent.yaml
      Parameters:
        AgentAliasName: "Latest"
        AgentIAMRoleArn: !Ref AgentIAMRoleArn
        ChartImageBucketName: !Ref S3Bucket
        LayersBucketName: !Ref S3Bucket
      TimeoutInMinutes: 35

  ClinicalTrialProtocolGeneratorAgentStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${S3Bucket}.s3.${AWS::Region}.amazonaws.com/agents_catalog/packaged_clinical-trial-protocol-generator-agent.yaml
      Parameters:
        AgentAliasName: "Latest"
        AgentIAMRoleArn: !Ref AgentIAMRoleArn
      TimeoutInMinutes: 35

  ClinicalTrialProtocolAssistantAgent:
    Type: AWS::Bedrock::Agent
    Properties:
      ActionGroups:
        - ActionGroupName: "UserInputAction"
          ParentActionGroupSignature: "AMAZON.UserInput"
          ActionGroupState: "ENABLED"
      AgentCollaboration: "SUPERVISOR"
      AgentCollaborators:
        - CollaboratorName: Clinical-Study-Search-Agent
          AgentDescriptor:
            AliasArn: !GetAtt ClinicalStudySearchAgentStack.Outputs.AgentAliasArn
          CollaborationInstruction: |
            Clinical Study Search Agent searches through clinical trial data source lie clinicaltrials.gov to find past studies that match what you're looking for—based on condition, treatment, study phase, patient type, or other filters. It brings back detailed information about the past studies, including the study design, goals, participants, and key outcomes. These results can then be used to help design new clinical trials or generate protocol documents.
        - CollaboratorName: Clinical-Trial-Protocol-Generator-Agent
          AgentDescriptor:
            AliasArn: !GetAtt ClinicalTrialProtocolGeneratorAgentStack.Outputs.AgentAliasArn
          CollaborationInstruction: |
            This agent helps you write a complete clinical trial protocol. It knows the structure and required sections, and can either start from scratch or use past studies (from the search agent) as references. It fills in key sections like objectives, study design, and eligibility criteria. You can then edit the document or regenerate specific sections. Perfect for trial managers or medical writers looking to save time.
      AgentName: "clinical-trial-protocol-assistant"
      # If an IAM role ARN is passed as a paremter, use it. Otherwise look in SSM parameter store
      AgentResourceRoleArn:
        "Fn::If":
          - AgentIAMRoleCondition
          - !Ref AgentIAMRoleArn
          - "{{resolve:ssm:/bedrock/agent/role/arn:1}}"
      AutoPrepare: True
      Description: "Clinical Trial Protocol Assistant for developing comprehensive clinical trial protocols"
      FoundationModel: !Ref BedrockModelId
      GuardrailConfiguration:
        GuardrailIdentifier: !GetAtt Guardrail.GuardrailId
        GuardrailVersion: !GetAtt Guardrail.Version
      Instruction: |
        You are an intelligent Clinical Protocol Builder Assistant powered by AI. Your purpose is to help trial sponsors, clinical operations teams, and medical writers create high-quality clinical trial protocol documents efficiently, using evidence from previous studies and a regulatory-aligned structure.

        Your Capabilities:
        You can coordinate multiple intelligent functions to assist users:

        Study Search Function: Finds and summarizes past clinical trials based on therapeutic area, phase, interventions, endpoints, and population criteria. Pulls from public trial registries and structured databases.

        Protocol Writing Function: Generates detailed protocol documents using medical writing templates and contextual inputs. Understands regulatory requirements (e.g., ICH-GCP) and standard protocol structure.

        Smart Feature:
        When generating protocols, you can automatically search for similar past trials to extract relevant study elements—such as objectives, eligibility criteria, design, and endpoints—so the user doesn’t need to provide everything from scratch. This reduces manual input and supports evidence-based protocol development.

        Working Process:
        Understand the user’s high-level goal (e.g., “Create a Phase 2 trial protocol for a new Alzheimer’s drug”)

        Offer to automatically search for similar past trials to extract protocol elements

        Present relevant findings to the user for selection or review

        Use extracted data and best practices to fill protocol sections (objectives, criteria, endpoints, etc.)

        Generate a full draft document with prefilled content and editable placeholders

        Respond to feedback or refinement requests (e.g., “change to placebo-controlled design”)

        Deliver a structured, professional draft for clinical and regulatory review

        Guidelines:
        Prioritize reuse of validated designs from similar studies where appropriate

        Clearly indicate when a section is based on a past trial and cite the source

        Avoid asking the user for details if they can be inferred or sourced from public trial data

        Ensure protocol sections are comprehensive, compliant, and formatted professionally

        Maintain traceability for all reused or referenced content

        Provide fallback to manual creation if no relevant studies are found

        Maintain a professional, scientific tone consistent with industry standards

  AgentAliasResource:
    Type: AWS::Bedrock::AgentAlias
    Condition: CreateAgentAliasCondition
    Properties:
      AgentId: !GetAtt ClinicalTrialProtocolAssistantAgent.AgentId
      AgentAliasName: !Ref AgentAliasName

  Guardrail:
    Type: AWS::Bedrock::Guardrail
    Properties:
      BlockedInputMessaging: "Sorry, your query violates our usage policies."
      BlockedOutputsMessaging: "Sorry, I am unable to reply because the output violates our usage policies."
      ContentPolicyConfig:
        FiltersConfig:
          - InputStrength: "LOW"
            OutputStrength: "LOW"
            Type: "SEXUAL"
          - InputStrength: "LOW"
            OutputStrength: "LOW"
            Type: "VIOLENCE"
          - InputStrength: "LOW"
            OutputStrength: "LOW"
            Type: "HATE"
          - InputStrength: "LOW"
            OutputStrength: "LOW"
            Type: "INSULTS"
          - InputStrength: "LOW"
            OutputStrength: "LOW"
            Type: "MISCONDUCT"
          - InputStrength: "LOW"
            OutputStrength: "NONE"
            Type: "PROMPT_ATTACK"
      Description: Turn on to block profane words and other harmful content.
      Name: ClinicalTrialProtocolGuardrail
      WordPolicyConfig:
        ManagedWordListsConfig:
          - Type: PROFANITY

Outputs:
  AgentId:
    Description: Agent ID
    Value: !Ref ClinicalTrialProtocolAssistantAgent
  AgentAliasId:
    Description: Agent Alias ID
    Value: !GetAtt AgentAliasResource.AgentAliasId
    Condition: CreateAgentAliasCondition
  AgentAliasArn:
    Description: Agent Alias ARN
    Value: !GetAtt AgentAliasResource.AgentAliasArn
    Condition: CreateAgentAliasCondition
