AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for Docker build pipeline with CodeBuild and ECR'

Parameters:
  PackageBucketName:
    Type: String
    Description: Bucket for source code package
  PackageArtifactKey:
    Type: String
    Description: Artifact S3 key for source code package 
  ProjectName:
    Type: String
    Description: Project name for the Code Build project

Resources:
  # ECR Repository
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${ProjectName}-ui-repo
      ImageScanningConfiguration:
        ScanOnPush: true
      ImageTagMutability: MUTABLE
      EncryptionConfiguration:
        EncryptionType: AES256
      EmptyOnDelete: True

  # CodeBuild Role
  CodeBuildDockerServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ECRAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:CompleteLayerUpload
                  - ecr:GetAuthorizationToken
                  - ecr:InitiateLayerUpload
                  - ecr:PutImage
                  - ecr:UploadLayerPart
                Resource: !GetAtt ECRRepository.Arn
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                Resource: '*'
        - PolicyName: LogsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListAllMyBuckets
                  - s3:HeadBucket
                  - s3:ListBucket
                Resource: '*'
        - PolicyName: S3GetAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub 'arn:aws:s3:::${PackageBucketName}/*'

  # CodeBuild Project
  CodeBuildDockerProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Ref ProjectName
      ServiceRole: !GetAtt CodeBuildDockerServiceRole.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:4.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: ECR_REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepository}
          - Name: ECR_REGION
            Value: !Sub ${AWS::Region}
          - Name: ECR_ACCOUNT_ID
            Value: !Sub ${AWS::AccountId}
      Source:
        Type: S3
        Location: !Sub ${PackageBucketName}/${PackageArtifactKey}
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - echo Logging in to Amazon ECR...
                - aws ecr get-login-password --region $ECR_REGION | docker login --username AWS --password-stdin $ECR_ACCOUNT_ID.dkr.ecr.$ECR_REGION.amazonaws.com
                - IMAGE_TAG=latest
            build:
              commands:
                - echo Build started on `date`
                - ls -lrta
                - echo Building the Docker image...
                - docker build -t $ECR_REPOSITORY_URI:$IMAGE_TAG .
            post_build:
              commands:
                - echo Build completed on `date`
                - echo Pushing the Docker image...
                - docker push $ECR_REPOSITORY_URI:$IMAGE_TAG
                - echo Writing image definitions file...
                - printf '{"ImageURI":"%s"}' $ECR_REPOSITORY_URI:$IMAGE_TAG > imageDefinitions.json
  

  # Custom resource to trigger the build once
  TriggerBuildResource:
    Type: Custom::TriggerBuild
    DependsOn: CodeBuildDockerProject
    Properties:
      ServiceToken: !GetAtt TriggerBuildFunction.Arn
      ProjectName: !Ref ProjectName

  TriggerBuildFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Handler: index.handler
      FunctionName: !Sub ${ProjectName}-lambda-trigger-build
      Role: !GetAtt TriggerBuildFunctionRole.Arn
      Timeout: 900
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import time
          import logging

          def handler(event, context):
              if event['RequestType'] != 'Create':
                  logging.info("Request is not create, sending success")
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                  return

              codebuild = boto3.client('codebuild')
              try:
                  # Start the build
                  response = codebuild.start_build(
                      projectName=event['ResourceProperties']['ProjectName']
                  )
                  build_id = response['build']['id']
                  logging.info(f"Started build {build_id}")
                  # Wait for build to complete
                  counter = 0
                  while True:
                      counter += 1
                      build_status = codebuild.batch_get_builds(ids=[build_id])
                      status = build_status['builds'][0]['buildStatus']
                      logging.info(f"Counter: {counter} Build status: {status}")
                      if status == 'SUCCEEDED':
                          cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                              'Message': f'Build {build_id} completed successfully'
                          })
                          return
                      elif status in ['FAILED', 'FAULT', 'STOPPED', 'TIMED_OUT']:
                          cfnresponse.send(event, context, cfnresponse.FAILED, {
                              'Message': f'Build {build_id} failed with status: {status}'
                          })
                          return
                      elif status in ['IN_PROGRESS', 'QUEUED']:
                          time.sleep(30)  # Wait 30 seconds before checking again
                      else:
                          cfnresponse.send(event, context, cfnresponse.FAILED, {
                              'Message': f'Build {build_id} in unexpected status: {status}'
                          })
                          return
                          
              except Exception as e:
                  logging.error(f'Error: {str(e)}')
                  cfnresponse.send(event, context, cfnresponse.FAILED, {
                      'Message': f'Error: {str(e)}'
                  })

  TriggerBuildFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      # RoleName: !Sub ${ProjectName}-lambda-trigger-build-function-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub ${ProjectName}-CodeBuildTriggerStartBuildPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource: !GetAtt CodeBuildDockerProject.Arn
Outputs:
  ECRRepositoryURI:
    Description: ECR Repository URI
    Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepository}:latest
    Export:
      Name: hcls-agents-ui-ecr-repository-uri
  
  CodeBuildProjectName:
    Description: CodeBuild Project Name
    Value: !Ref CodeBuildDockerProject
  
  ECRRepositoryName:
    Description: ECR Repository Name
    Value: !Ref ECRRepository
